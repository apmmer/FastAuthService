basePath: /
definitions:
  models.User:
    properties:
      company_id:
        type: integer
      created_at:
        type: string
      deleted_at:
        type: string
      email:
        type: string
      id:
        type: integer
      password:
        type: string
      rank:
        type: integer
      screen_name:
        type: string
      updated_at:
        type: string
    type: object
  schemas.CreateUserRequest:
    description: This request includes the necessary details to create a new user.
    properties:
      company_id:
        description: |-
          The ID of the company to associate with the new user. This field is optional and must be greater than 0 if provided.
          @Min 0
          @Example 1
        type: integer
      email:
        description: |-
          The email address of the new user. This field is required and must be a valid email address.
          @Format email
          @Example user@example.com
        type: string
      password:
        description: |-
          The password for the new user. This field is required and must contain at least 7 characters.
          @MinLength 7
          @Example 1234567
        minLength: 7
        type: string
      rank:
        description: |-
          The rank of the new user. This field is optional and must be greater than 0 if provided.
          @Min 0
          @Example 1
        type: integer
      screen_name:
        description: |-
          The desired username for the new user. This field is required and must contain at least 4 characters.
          @MinLength 4
          @Example exampleUser
        minLength: 4
        type: string
    required:
    - email
    - password
    - screen_name
    type: object
  schemas.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  schemas.HealthCheckResponse:
    properties:
      status:
        type: string
    type: object
  schemas.LoginInput:
    properties:
      email:
        type: string
      password:
        minLength: 7
        type: string
    required:
    - email
    - password
    type: object
  schemas.TokenResponse:
    properties:
      access_expires:
        type: integer
      access_token:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API server for auth stuff
  title: Auth Service API
  version: v.1.0.0
paths:
  /api/healthcheck:
    get:
      consumes:
      - application/json
      description: Get server status
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.HealthCheckResponse'
        "401":
          description: Error returned when the provided auth data is invalid
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "403":
          description: Error returned when auth data was not provided
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Show server status
      tags:
      - Health
  /api/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user using email and password, and generates a
        new JWT. Also sets refresh token in cookies.
      parameters:
      - description: The email and password of the user
        in: body
        name: InputBody
        required: true
        schema:
          $ref: '#/definitions/schemas.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: Returns a struct with the JWT and its expiration timestamp
          schema:
            $ref: '#/definitions/schemas.TokenResponse'
        "400":
          description: Returns an error message if the request body cannot be parsed
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "401":
          description: Error returned when the provided auth data is invalid
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "403":
          description: Error returned when auth data was not provided
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Returns an error message if there is a server-side issue
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Logs in a user
      tags:
      - Auth
  /api/logout:
    post:
      consumes:
      - application/json
      description: Restricts access to services for the active client until a new
        login occurs.
      produces:
      - application/json
      responses:
        "200":
          description: 'Successfully logged out user with ID #id'
          schema:
            type: string
        "401":
          description: Error returned when the provided auth data is invalid
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "403":
          description: Error returned when auth data was not provided
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      security:
      - JWTAuth: []
      - ApiKeyAuth: []
      summary: Logs out a user
      tags:
      - Auth
  /api/refresh:
    post:
      consumes:
      - application/json
      description: Use the refresh token to get a new access token and to set new
        refresh token in cookies.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.TokenResponse'
        "401":
          description: Error returned when the provided auth data is invalid
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "403":
          description: Error returned when auth data was not provided
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      security:
      - JWTAuth: []
      - ApiKeyAuth: []
      summary: Refresh tokens
      tags:
      - Auth
  /api/users:
    get:
      consumes:
      - application/json
      description: get many users based on pagination and sorting parameters
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      - description: 'Sorting (format: field[direction])'
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "401":
          description: Error returned when the provided auth data is invalid
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "403":
          description: Error returned when auth data was not provided
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "422":
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Get list of users
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Register a new user with email, screen_name, and password
      parameters:
      - description: Create user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/schemas.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "401":
          description: Error returned when the provided auth data is invalid
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "403":
          description: Error returned when auth data was not provided
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Register new user
      tags:
      - Users
  /api/users/{id}:
    get:
      description: Retrieve a user from the database by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "401":
          description: Error returned when the provided auth data is invalid
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "403":
          description: Error returned when auth data was not provided
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "406":
          description: Multiple records found (internal error)
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "422":
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Get user by ID
      tags:
      - Users
  /api/validate:
    post:
      consumes:
      - application/json
      description: Checks if provided authorization data is valid.
      produces:
      - application/json
      responses:
        "200":
          description: 'Authorization data is valid for user with ID #id'
          schema:
            type: string
        "401":
          description: Error returned when the provided auth data is invalid
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "403":
          description: Error returned when auth data was not provided
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      security:
      - JWTAuth: []
      - ApiKeyAuth: []
      summary: Checks access for secure endpoints.
      tags:
      - Auth
schemes:
- http
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: X-Api-Key
    type: apiKey
  JWTAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
